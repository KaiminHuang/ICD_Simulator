           *******************************************************
                            Listing of SPARK Text
                              Examiner GPL 2011
             Copyright (C) 2011 Altran Praxis Limited, Bath, U.K.
           *******************************************************


                        DATE : 01-JUN-2014 13:56:56.13

Line
   1  with Measures;
   2  with HRM;
   3  with ImpulseGenerator;
   4  
   5  package body ICD is
   6     	-- time : constant Integer := 5;
   7  	procedure Init(icdInstance :out ICDType) is
   8  	begin
   9  		icdInstance.Rate 				:= Measures.BPM'First;
  10  		icdInstance.Last6thRate         := Measures.BPM'First;
  11  		icdInstance.Last5thRate         := Measures.BPM'First;
  12  		icdInstance.Last4thRate         := Measures.BPM'First;
  13  		icdInstance.Last3rdRate         := Measures.BPM'First;
  14  		icdInstance.Last2ndRate         := Measures.BPM'First;
  15  		icdInstance.Last1stRate         := Measures.BPM'First;
  16  
  17  		icdInstance.IsOn 				:= False;
  18  		--Tachycardia realated variables
  19  		icdInstance.TachycardiaBound 	:= Measures.TUB'First;
  20  		icdInstance.ImpulseRateBound	:= Measures.TUB'Last - 15;
  21  		icdInstance.isTachycardia 		:= False;
  22  		icdInstance.isInImpulseProcess 	:= False;
  23  		icdInstance.Impulse 			:= 0;
  24  		icdInstance.ImpulseRate 		:= 0;
  25  		icdInstance.Offset 				:= 0;
  26  		icdInstance.TickToNextImpulse 	:= 0;
  27  		icdInstance.Signal 				:= 10;
  28  		--Fibrillation realated variables
  29  		icdInstance.FibrillationBound 	:= Measures.FUB'First;
  30  		icdInstance.isFibrillation		:= False;
  31  		icdInstance.isWait				:= False;
  32  		icdInstance.waitAfterShock      := 10;
  33  		icdInstance.AbnormalNum         := 0;
  34  	end Init;

+++        Flow analysis of subprogram Init performed: no 
           errors found.

  35  
  36  	procedure On(icdInstance: in out ICDType) is
  37  	begin
  38  		-- re-set the Icd, which setting all variable to default value, excepting TachycardiaBound 
  39  		-- and FibrillationBound, because they might be changed in off mode
  40  		icdInstance.Last6thRate         := Measures.BPM'First;
  41  		icdInstance.Last5thRate         := Measures.BPM'First;
  42  		icdInstance.Last4thRate         := Measures.BPM'First;
  43  		icdInstance.Last3rdRate         := Measures.BPM'First;
  44  		icdInstance.Last2ndRate         := Measures.BPM'First;
  45  		icdInstance.Last1stRate         := Measures.BPM'First;
  46  		icdInstance.IsOn 				:= True;
  47  
  48  		--Tachycardia realated variables
  49  		icdInstance.TachycardiaBound 	:= Measures.TUB'First;
  50  		icdInstance.isTachycardia 		:= False;
  51  		icdInstance.isInImpulseProcess 	:= False;
  52  		icdInstance.Impulse 			:= 0;
  53  		icdInstance.ImpulseRate 		:= 0;
  54  		icdInstance.Offset 				:= 0;
  55  		icdInstance.TickToNextImpulse 	:= 0;
  56  		icdInstance.Signal 				:= 10;
  57  		--Fibrillation realated variables
  58  		icdInstance.FibrillationBound 	:= Measures.FUB'First;
  59  		icdInstance.isFibrillation		:= False;
  60  		icdInstance.isWait				:= False;
  61  		icdInstance.waitAfterShock      := 10;
  62  		icdInstance.AbnormalNum         := 0;
  63  
  64  
  65  
  66  	end On;

+++        Flow analysis of subprogram On performed: no 
           errors found.

  67  
  68  	function IsOn(icdInstance : in ICDType) return Boolean is
  69    	begin
  70      	return icdInstance.IsOn;
  71  	end IsOn;

+++        Flow analysis of subprogram IsOn performed: no 
           errors found.

  72  
  73  	procedure Off(icdInstance: in out ICDType) is
  74  
  75  	begin
  76      	-- Since ICD is the controller, it should never be turned down, only turn down Hrm and Gen
  77      	icdInstance.IsOn := False;
  78     	end Off;

+++        Flow analysis of subprogram Off performed: no 
           errors found.

  79  
  80  	procedure GetAbnormalNum (icdInstance : in out ICDType) is
  81  	begin 
  82  		icdInstance.AbnormalNum := 0;
  83  		if abs(icdInstance.Last6thRate - icdInstance.Last5thRate) >= icdInstance.FibrillationBound then
  84  			icdInstance.AbnormalNum := icdInstance.AbnormalNum + 1;
  85  		end if;
  86  		if abs(icdInstance.Last5thRate - icdInstance.Last4thRate) >= icdInstance.FibrillationBound then
  87  			icdInstance.AbnormalNum := icdInstance.AbnormalNum + 1;
  88  		end if;
  89  		if abs(icdInstance.Last4thRate - icdInstance.Last3rdRate) >= icdInstance.FibrillationBound then
  90  			icdInstance.AbnormalNum := icdInstance.AbnormalNum + 1;
  91  		end if;
  92  		if abs(icdInstance.Last3rdRate - icdInstance.Last2ndRate) >= icdInstance.FibrillationBound then
  93  			icdInstance.AbnormalNum := icdInstance.AbnormalNum + 1;
  94  		end if;
  95  		if abs(icdInstance.Last2ndRate - icdInstance.Last1stRate) >= icdInstance.FibrillationBound then
  96  			icdInstance.AbnormalNum := icdInstance.AbnormalNum + 1;
  97  		end if;
  98  	end GetAbnormalNum;	

+++        Flow analysis of subprogram GetAbnormalNum 
           performed: no errors found.

  99  
 100  	procedure isTachycardia(icdInstance : in out ICDType) is
 101  	begin
 102  		-- check wheter the heart rate is higher than the upper bound
 103  		if icdInstance.Rate >= icdInstance.TachycardiaBound  then 
 104  			icdInstance.isTachycardia := True;
 105  		else
 106  			icdInstance.isTachycardia := False;
 107  		end if;
 108  	end isTachycardia;

+++        Flow analysis of subprogram isTachycardia 
           performed: no errors found.

 109  
 110  
 111  	procedure isFibrillation(icdInstance : in out ICDType) is
 112  	begin
 113  		-- if there are 3 abnormal rate in 5 ticks then it is considered as a Fibrillation
 114  		GetAbnormalNum(icdInstance);
 115  		if icdInstance.AbnormalNum > 3 then
 116  			icdInstance.isFibrillation := true;
 117  			-- when a Fibrillation is detected Tachycardia detection should be turn off, since 
 118  			-- Fibrillationis more serious than Tachycardia
 119  			icdInstance.isTachycardia := False;
 120  		else
 121  			icdInstance.isFibrillation := False;
 122  		end if;
 123  	end isFibrillation;

+++        Flow analysis of subprogram isFibrillation 
           performed: no errors found.

 124  
 125  
 126     	procedure setFibrillationBound (icdInstance : in out ICDType; ub : in Integer) is
 127  	begin
 128  		-- The Fibrillation Bound can only be changed in Off mode
 129  		if not icdInstance.IsOn then
 130  			-- make sure the Ub is in the range
 131  			icdInstance.FibrillationBound :=  Measures.LimitFUB(ub);
 132  		end if;
 133  	end setFibrillationBound;

+++        Flow analysis of subprogram setFibrillationBound 
           performed: no errors found.

 134  
 135  	procedure setTachycardiaBound (icdInstance : in out ICDType; ub : in Integer) is
 136  	begin
 137  		-- The Fibrillation Bound can only be changed in Off mode
 138  		if not icdInstance.IsOn then
 139  			-- make sure the Ub is in the range
 140  			icdInstance.TachycardiaBound := Measures.LimitTUB(ub);   
 141  		end if;
 142  	end setTachycardiaBound;

+++        Flow analysis of subprogram setTachycardiaBound 
           performed: no errors found.

 143  
 144  	procedure BPMArrayUpdate (icdInstance : in out ICDType) is
 145  	begin 
 146  		icdInstance.Last6thRate := icdInstance.Last5thRate;
 147  		icdInstance.Last5thRate := icdInstance.Last4thRate;
 148  		icdInstance.Last4thRate := icdInstance.Last3rdRate;
 149  		icdInstance.Last3rdRate := icdInstance.Last2ndRate;
 150  		icdInstance.Last2ndRate := icdInstance.Last1stRate;
 151  		icdInstance.Last1stRate := icdInstance.Rate;
 152  		-- Update the last 1,2,3,4,5,6
 153  
 154  	end BPMArrayUpdate;

+++        Flow analysis of subprogram BPMArrayUpdate 
           performed: no errors found.

 155  
 156  	procedure CalculateAndSetImpluse(icdInstance : in out ICDType) is
 157  	begin
 158  		if icdInstance.Ison = True then
 159  			-- reset impulse to 0 before each caculation
 160  			 icdInstance.Impulse := 0;
 161  			--check whether there is 1s after giving a shock
 162  			if not icdInstance.isWait then
 163  				-- Check whether there is a Fibrillation
 164  				if icdInstance.isFibrillation then
 165  					-- since Fibrillation is heavier than Tachycardia then if a Fibrillation is detected
 166  					--, set impulse to 30, and terminate all in process impulse
 167  					icdInstance.Impulse 			:= 30;
 168  					icdInstance.isInImpulseProcess 	:= False;
 169  					icdInstance.isWait				:= True;
 170  					-- reset tick and sinal to it's defualt value
 171  					icdInstance.TickToNextImpulse 	:= 0;
 172  					icdInstance.Signal 				:= 10;
 173  				end if;
 174  					
 175  				-- check whether there is a Tachycardia detected or a impulse treatment in process
 176  				if (icdInstance.isTachycardia or icdInstance.isInImpulseProcess) then
 177  					-- set the isInImpulseProcess to true indicatong that there is a treatment in 
 178  					-- process it will be changed to false when  a process is finised (signal == 0)
 179  					icdInstance.isInImpulseProcess := True;
 180  					--caculate the bpm, which equals Upper Bound + 15
 181  					if icdInstance.ImpulseRate  <= icdInstance.ImpulseRateBound then
 182  						icdInstance.ImpulseRate := icdInstance.TachycardiaBound + 15;
 183  					end if;
 184  					--caculate the offset between inpulse
 185  					icdInstance.offset := 600 / icdInstance.ImpulseRate;
 186  
 187  					if icdInstance.TickToNextImpulse = 0 then
 188  						-- if yes print "--Already in impulse procedure"
 189  						-- set Impluse value to 2 j;
 190  						icdInstance.Impulse := 2;
 191  						-- update how many signal remains need to send
 192  						if icdInstance.Signal > 0 then
 193  							icdInstance.Signal := icdInstance.Signal - 1;
 194  						end if;
 195  						-- set next impulse time to offset once it is 0
 196  						icdInstance.TickToNextImpulse := icdInstance.offset -1 ;
 197  					else
 198  						icdInstance.Impulse := 0;
 199  						if icdInstance.TickToNextImpulse > 0 then
 200  							icdInstance.TickToNextImpulse := icdInstance.TickToNextImpulse - 1;
 201  						end if;
 202  					end if;
 203  					-- if singal equals to 0 means the treatment is fninished then set the isTachycardia
 204  					-- to False set TickToNextImpulse to default 0 reset singal to 10
 205  					if icdInstance.Signal = 0 then
 206  						icdInstance.TickToNextImpulse := 0;
 207  						icdInstance.Signal := 10;
 208  						icdInstance.isInImpulseProcess := False;
 209  					end if;
 210  				end if;
 211  			end if;
 212  		end if;
 213  	end CalculateAndSetImpluse;

+++        Flow analysis of subprogram 
           CalculateAndSetImpluse performed: no errors found.

 214  
 215  	procedure isWait(icdInstance : in out ICDType) is
 216  	begin
 217  		if icdInstance.isWait then
 218  			if icdInstance.waitAfterShock > 1 then
 219  				icdInstance.waitAfterShock := icdInstance.waitAfterShock -1 ;
 220  				if icdInstance.waitAfterShock = 0 then
 221  					icdInstance.waitAfterShock := 10;
 222  					icdInstance.isWait := False;
 223  				end if;
 224  			end if;
 225  		end if;
 226  	end isWait;

+++        Flow analysis of subprogram isWait performed: no 
           errors found.

 227  
 228  	procedure Tick(icdInstance : in out ICDType; Hm : in HRM.HRMType; Gen : in out ImpulseGenerator
 229  		.GeneratorType) is
 230  	begin
 231  		-- read the heart rate from hrm
 232  		HRM.GetRate(Hm, icdInstance.Rate);
 233  		BPMArrayUpdate(icdInstance);
 234  		--check whether there is 1s after giving a shock
 235  		isWait(icdInstance);
 236  		--check whether there is a Tachycardia
 237  		isTachycardia(icdInstance);
 238  		--check whether there is a Fibrillation
 239  		isFibrillation(icdInstance);		
 240  		CalculateAndSetImpluse(icdInstance);
 241  		-- calculate and set the impluse
 242  		ImpulseGenerator.SetImpulse(Gen, icdInstance.Impulse);    
 243  	end Tick;

+++        Flow analysis of subprogram Tick performed: no 
           errors found.

 244  end ICD;
No summarized warnings



--End of file--------------------------------------------------
